local Services = setmetatable({}, {
	__index = function(Self, Key)
		return game:GetService(Key)
	end
})

local Client = Services.Players.LocalPlayer

local function waitForWebSocket(timeout)
	local startTime = tick()
	while not (WebSocket and WebSocket.connect) do
		warn("Reconnecting WebSocket...")
		task.wait(1)
		if timeout and tick() - startTime > timeout then
			warn("WebSocket connection timed out.")
			return nil
		end
	end
	return WebSocket.connect
end

local SMethod = (WebSocket and WebSocket.connect)

if not SMethod then
	warn("WebSocket not available. Attempting to reconnect...")
	SMethod = waitForWebSocket(10)
end

if not SMethod then
	warn("Failed to connect to WebSocket.")
	return
end

local Main							= function()
	local Success, WebSocket				= pcall(SMethod, "ws://localhost:9000/")
    	local Closed						= false

	if not Success then return end

	WebSocket:Send(Services.HttpService:JSONEncode({
		Method						= "Authorization",
		Name						= Client.Name
	}))

	WebSocket.OnMessage:Connect(function(Unparsed)
		local Parsed					= Services.HttpService:JSONDecode(Unparsed)
		
		if (Parsed.Method == "Execute") then
			local Function, Error			= loadstring(Parsed.Data)

			if Error then return WebSocket:Send(Services.HttpService:JSONEncode({
				Method				= "Error",
				Message				= Error
			}))	end
			
			Function()
		end
	end)

    WebSocket.OnClose:Connect(function()
        Closed							= true
    end)

    repeat wait() until Closed
end

while wait(1) do
	local Success, Error					= pcall(Main)

	if not Success then print(Error) end
end
